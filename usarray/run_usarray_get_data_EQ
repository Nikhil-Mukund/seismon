
import os, sys, glob
import numpy as np
import astropy.time

import obspy
import obspy.iris

from seismon import eqmon

client = obspy.fdsn.client.Client("IRIS")

channellist = "input/channels.txt"
lines = [line.rstrip('\n') for line in open(channellist)]

#starttime_min=obspy.UTCDateTime(2016, 1, 1, 0, 0, 0, 0)
#endtime_max=obspy.UTCDateTime(2016, 12, 1, 0, 0, 0, 0)

for line in lines:
    lineSplit = line.split(" ")
    lineSplit = filter(None, lineSplit)

    channel = lineSplit[0]
    samplef = float(lineSplit[1])
    calibration = float(lineSplit[2])
    latitude = float(lineSplit[3])
    longitude = float(lineSplit[4])
    starttime = lineSplit[5]
    endtime = lineSplit[6]

    print channel, samplef, latitude, longitude, starttime, endtime

    #if starttime < starttime_min:
    #    starttime = obspy.UTCDateTime(2016, 1, 1, 0, 0, 0, 0)
    #if endtime > endtime_max:
    #    endtime = obspy.UTCDateTime(2016, 1, 1, 12, 0, 0, 0)

    minMagnitude = 6.0
    events = client.get_events(minmagnitude=minMagnitude,starttime=starttime,endtime=endtime)

    starttime = astropy.time.Time(starttime, format='isot', scale='utc')
    endtime = astropy.time.Time(endtime, format='isot', scale='utc')

    if starttime > endtime:
        continue

    eqfile = "/home/mcoughlin/Seismon/USArray/Text_Files_EQ/EQ/%s.txt"%(channel.replace(":","_"))
    f = open(eqfile,'w')

    for event in events.events:
        attributeDic = eqmon.irisread(event)
       
        print attributeDic["eventName"], attributeDic["GPS"], attributeDic["Magnitude"], attributeDic["Latitude"],attributeDic["Longitude"]
       
        ifo = "%s,%.5f,%.5f"%(channel, latitude, longitude)
 
        attributeDicTemp = eqmon.eqmon_loc(attributeDic,ifo)
        traveltimes = attributeDicTemp["traveltimes"][channel]

        #print attributeDic["eventName"], attributeDic["GPS"], attributeDic["Magnitude"], attributeDic["Latitude"],attributeDic["Longitude"], traveltimes["Distances"][0], traveltimes["Ptimes"][0], traveltimes["Stimes"][0], traveltimes["Rtwotimes"][0], traveltimes["RthreePointFivetimes"][0], traveltimes["Rfivetimes"][0], traveltimes["Rfamp"][0]

        arrival = np.min([max(traveltimes["Rtwotimes"]),max(traveltimes["RthreePointFivetimes"]),max(traveltimes["Rfivetimes"]),max(traveltimes["Stimes"]),max(traveltimes["Ptimes"])])
        departure = np.max([max(traveltimes["Rtwotimes"]),max(traveltimes["RthreePointFivetimes"]),max(traveltimes["Rfivetimes"]),max(traveltimes["Stimes"]),max(traveltimes["Ptimes"])])

        arrival_floor = np.floor(arrival / 100.0) * 100.0
        departure_ceil = np.ceil(departure / 100.0) * 100.0

        f.write("%s %.1f %.1f %.1f %.1f %.1f %.1f %.1f %.5e %d %d %.1f %.1f %e %.1f %s\n"%(attributeDic["eventName"],attributeDic["GPS"],attributeDic["Magnitude"],max(traveltimes["Ptimes"]),max(traveltimes["Stimes"]),max(traveltimes["Rtwotimes"]),max(traveltimes["RthreePointFivetimes"]),max(traveltimes["Rfivetimes"]),traveltimes["Rfamp"][0],arrival_floor,departure_ceil,attributeDic["Latitude"],attributeDic["Longitude"],max(traveltimes["Distances"]),attributeDic["Depth"],channel))

        print "%s %.1f %.1f %.1f %.1f %.1f %.1f %.1f %.5e %d %d %.1f %.1f %e %.1f %s\n"%(attributeDic["eventName"],attributeDic["GPS"],attributeDic["Magnitude"],max(traveltimes["Ptimes"]),max(traveltimes["Stimes"]),max(traveltimes["Rtwotimes"]),max(traveltimes["RthreePointFivetimes"]),max(traveltimes["Rfivetimes"]),traveltimes["Rfamp"][0],arrival_floor,departure_ceil,attributeDic["Latitude"],attributeDic["Longitude"],max(traveltimes["Distances"]),attributeDic["Depth"],channel)

        gpsStart = arrival_floor.copy()
        gpsEnd = departure_ceil.copy()

        psdfile = "/home/mcoughlin/Seismon/USArray/Text_Files_EQ/PSD/%s/%d-%d.txt"%(channel.replace(":","_"),gpsStart,gpsEnd)
        if os.path.isfile(psdfile): continue
       
        print channel,gpsStart,gpsEnd
        system_command = "python usarray_get_data_EQ -c %s -s %d -e %d --doDownload"%(channel,gpsStart,gpsEnd)
        os.system(system_command)

    f.close()
 
