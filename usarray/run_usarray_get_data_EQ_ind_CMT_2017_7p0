
import os, sys, glob
import numpy as np
import astropy.time

import matplotlib
from mpl_toolkits.basemap import Basemap
matplotlib.use("AGG")
matplotlib.rcParams.update({'font.size': 18})
from matplotlib import pyplot as plt
from matplotlib import cm

from mpl_toolkits.axes_grid1.inset_locator import inset_axes
from mpl_toolkits.axes_grid1.inset_locator import mark_inset

import obspy
import obspy.iris

import seismon
from seismon import eqmon

def gen_basemap():
    #m = Basemap(llcrnrlon=0,llcrnrlat=-80,urcrnrlon=360,urcrnrlat=80,projection='mill')
    #m.drawcoastlines(linewidth=1.25)
    #m.fillcontinents(color='0.8')
    #m.drawparallels(np.arange(-80,81,20),labels=[1,1,0,0])
    #m.drawmeridians(np.arange(0,360,60),labels=[0,0,0,1])
   
    m = Basemap(llcrnrlon=-120.,llcrnrlat=0.0,urcrnrlon=-20.0,urcrnrlat=80.,
            projection='lcc',lat_1=20.,lat_2=40.,lon_0=-60.,
            resolution ='l',area_thresh=1000.)
    m.drawcoastlines(linewidth=1.25)
    m.fillcontinents(color='0.8')
    m.drawparallels(np.arange(-80,81,20),labels=[1,1,0,0])
    m.drawmeridians(np.arange(0,360,60),labels=[0,0,0,1])

    return m

#client = obspy.fdsn.client.Client("IRIS")

channellist = "input/channels.txt"
lines = [line.rstrip('\n') for line in open(channellist)]

minMagnitude = 7.0
#events = client.get_events(minmagnitude=minMagnitude,starttime=starttime_min,endtime=endtime_max)

years = np.arange(2017,2018)
months = ["jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec"]

for year in years:
    for month in months:
        try:
            catfile = "http://www.ldeo.columbia.edu/~gcmt/projects/CMT/catalog/NEW_MONTHLY/%d/%s%d.ndk"%(year,month,np.mod(year,100))
            cat = obspy.readEvents(catfile)
            #print catfile
        except:
            continue

        for event in cat:
            attributeDic = eqmon.cmtread(event)

            eqtime = astropy.time.Time(attributeDic["GPS"], format='gps', scale='utc')
            eqtime = obspy.UTCDateTime(eqtime.isot)

            if attributeDic["Magnitude"] < minMagnitude: continue
            
            #print attributeDic["eventName"], attributeDic["GPS"], attributeDic["Magnitude"], attributeDic["Latitude"],attributeDic["Longitude"]

            data = {}

            for line in lines:
                lineSplit = line.split(" ")
                lineSplit = filter(None, lineSplit)
            
                channel = lineSplit[0]
                samplef = float(lineSplit[1])
                calibration = float(lineSplit[2])
                latitude = float(lineSplit[3])
                longitude = float(lineSplit[4])
                starttime = obspy.UTCDateTime(lineSplit[5])
                endtime = obspy.UTCDateTime(lineSplit[6])
         
                #print starttime, endtime, eqtime

                if starttime > eqtime: continue
                if endtime < eqtime: continue
          
                channelSplit = channel.split(":")
                array = channelSplit[0]
                if not array in ["TA","US"]: continue
 
                #print channel, samplef, latitude, longitude, starttime, endtime, eqtime
            
                ifo = "%s,%.5f,%.5f"%(channel, latitude, longitude)
             
                attributeDicTemp = eqmon.eqmon_loc(attributeDic,ifo)
                traveltimes = attributeDicTemp["traveltimes"][channel]
            
                #print attributeDic["eventName"], attributeDic["GPS"], attributeDic["Magnitude"], attributeDic["Latitude"],attributeDic["Longitude"], traveltimes["Distances"][0], traveltimes["Ptimes"][0], traveltimes["Stimes"][0], traveltimes["Rtwotimes"][0], traveltimes["RthreePointFivetimes"][0], traveltimes["Rfivetimes"][0], traveltimes["Rfamp"][0]
            
                arrival = np.min([max(traveltimes["Rtwotimes"]),max(traveltimes["RthreePointFivetimes"]),max(traveltimes["Rfivetimes"]),max(traveltimes["Stimes"]),max(traveltimes["Ptimes"])])
                departure = np.max([max(traveltimes["Rtwotimes"]),max(traveltimes["RthreePointFivetimes"]),max(traveltimes["Rfivetimes"]),max(traveltimes["Stimes"]),max(traveltimes["Ptimes"])])
            
                arrival_floor = np.floor(arrival / 100.0) * 100.0
                departure_ceil = np.ceil(departure / 100.0) * 100.0
            
                gpsStart = arrival_floor.copy()
                gpsEnd = departure_ceil.copy()
            
                timefile = "/home/mcoughlin/Seismon/USArray/Text_Files_EQ/Timeseries/%s/%d-%d.txt"%(channel.replace(":","_"),gpsStart,gpsEnd)
                if not os.path.isfile(timefile):
                    system_command = "python usarray_get_data_EQ -c %s -s %d -e %d --doDownload"%(channel,gpsStart,gpsEnd)
                    #os.system(system_command)
                if not os.path.isfile(timefile): continue
        
                data_out = np.loadtxt(timefile)
                if not data_out.size: continue       
 
                data[channel] = {}                
                data[channel]["tt"] = data_out[1,0] - attributeDic["GPS"]
                data[channel]["velocity"] = data_out[1,1]
                data[channel]["latitude"] = latitude
                data[channel]["longitude"] = longitude
                data[channel]["distance"] = traveltimes["Distances"][0]
                data[channel]["azimuth"] = traveltimes["Azimuth"][0] 
                data[channel]["velocity_prediction"] = traveltimes["Rfamp"][0]

                frac_error = np.abs(data[channel]["velocity_prediction"]-data[channel]["velocity"]) / np.min([data[channel]["velocity_prediction"],data[channel]["velocity"]])
                data[channel]["frac_error"] = frac_error

            plotDirectory = os.path.join("/home/mcoughlin/Seismon/USArray/","EQs_CMT",attributeDic["eventName"])
            seismon.utils.mkdir(plotDirectory)

            pngFile = os.path.join(plotDirectory,'azimuth_distance.pdf')
            plt.figure()
            ax = plt.gca()
            for channel in data.iterkeys():
                distance = data[channel]["distance"]
                azimuth = data[channel]["azimuth"]
                sc = plt.scatter(distance,azimuth,s=20,c=np.log10(data[channel]["velocity"]),zorder=10,vmin=-6,vmax=-3)
            ax.set_xscale('log')
            plt.xlabel("Distance [m]")
            plt.ylabel("Azimuth [deg]")
            cbar = plt.colorbar(sc)
            cbar.set_label("log10(Ground velocity [m/s])")
            plt.show()
            plt.savefig(pngFile)
            plt.close()
        
            pngFile = os.path.join(plotDirectory,"maps_vel.pdf")
            plt.figure(figsize=(12,6))
            m = Basemap(llcrnrlon=0,llcrnrlat=-80,urcrnrlon=360,urcrnrlat=80,projection='mill')
            m.drawcoastlines(linewidth=1.25)
            m.fillcontinents(color='0.8')
            m.drawparallels(np.arange(-80,81,20),labels=[1,1,0,0])
            m.drawmeridians(np.arange(0,360,60),labels=[0,0,0,1]) 
            for channel in data.iterkeys():
                latitude = data[channel]["latitude"]
                longitude = np.mod(data[channel]["longitude"],360.0)
                x, y = m(longitude,latitude)
                cs = m.scatter(x,y,s=20,c=np.log10(data[channel]["velocity"]),zorder=10,vmin=-6,vmax=-3)
            cbar = m.colorbar(cs,location='right',pad="5%")
            cbar.set_label('log10(Peak Amplitude) [m/s]')
            latitude = attributeDic["Latitude"]
            longitude = np.mod(attributeDic["Longitude"],360.0)
            x, y = m(longitude,latitude)
            m.plot(x,y,'rx',markersize=20)
            plt.show()
            plt.savefig(pngFile)
            plt.close()
        
            pngFile = os.path.join(plotDirectory,"maps_vel_pred.pdf")
            plt.figure(figsize=(12,6))
            m = Basemap(llcrnrlon=0,llcrnrlat=-80,urcrnrlon=360,urcrnrlat=80,projection='mill')
            m.drawcoastlines(linewidth=1.25)
            m.fillcontinents(color='0.8')
            m.drawparallels(np.arange(-80,81,20),labels=[1,1,0,0])
            m.drawmeridians(np.arange(0,360,60),labels=[0,0,0,1])
            for channel in data.iterkeys():
                latitude = data[channel]["latitude"]
                longitude = np.mod(data[channel]["longitude"],360.0)
                x, y = m(longitude,latitude)
                cs = m.scatter(x,y,s=20,c=np.log10(data[channel]["velocity_prediction"]),zorder=10,vmin=-6,vmax=-3)
            cbar = m.colorbar(cs,location='right',pad="5%")
            cbar.set_label('log10(Peak Amplitude) [m/s]')
            latitude = attributeDic["Latitude"]
            longitude = np.mod(attributeDic["Longitude"],360.0)
            x, y = m(longitude,latitude)
            m.plot(x,y,'rx',markersize=20)
            plt.show()
            plt.savefig(pngFile)
            plt.close()

            pngFile = os.path.join(plotDirectory,"maps_vel_pred_vs_measured.pdf")
            fig = plt.figure(figsize=(8,6))
            ax = fig.add_subplot(111)
            m = gen_basemap()
            for channel in data.iterkeys():
                latitude = data[channel]["latitude"]
                longitude = np.mod(data[channel]["longitude"],360.0)
                x, y = m(longitude,latitude)
                cs = m.scatter(x,y,s=20,c=data[channel]["frac_error"],zorder=10,vmin=0,vmax=2)
            cbar = m.colorbar(cs,location='right',pad="20%")
            cbar.set_label('Fractional Error')
            latitude = attributeDic["Latitude"]
            longitude = np.mod(attributeDic["Longitude"],360.0)

            size = 30.0
            axins = inset_axes(ax, width="30%", height=1., loc=3)
            axins.set_xlim(longitude-size, longitude+size)
            axins.set_ylim(latitude-size, latitude+size)
            
            m2 = Basemap(llcrnrlon=longitude-size,llcrnrlat=latitude-size,urcrnrlon=longitude+size,urcrnrlat=latitude+size,
            projection='lcc',lat_1=latitude,lat_2=latitude+10,lon_0=longitude,resolution ='l',area_thresh=1000.)
            m2.drawcoastlines(linewidth=1.25)
            m2.fillcontinents(color='0.8')
            m2.drawparallels(np.arange(-80,81,20),labels=[1,1,0,0])
            m2.drawmeridians(np.arange(0,360,60),labels=[0,0,0,1])
            x, y = m2(longitude,latitude)
            m2.plot(x,y,'rx',markersize=20)

            plt.show()
            plt.savefig(pngFile)
            plt.close()

            pngFile = os.path.join(plotDirectory,"maps_time.pdf")
            plt.figure(figsize=(12,6))
            m = Basemap(llcrnrlon=0,llcrnrlat=-80,urcrnrlon=360,urcrnrlat=80,projection='mill')
            m.drawcoastlines(linewidth=1.25) 
            m.fillcontinents(color='0.8')
            m.drawparallels(np.arange(-80,81,20),labels=[1,1,0,0])
            m.drawmeridians(np.arange(0,360,60),labels=[0,0,0,1]) 
            for channel in data.iterkeys():
                latitude = data[channel]["latitude"]
                longitude = np.mod(data[channel]["longitude"],360.0)
                x, y = m(longitude,latitude)
                cs = m.scatter(x,y,s=20,c=data[channel]["tt"],zorder=10,vmin=0,vmax=7200)
            cbar = m.colorbar(cs,location='right',pad="5%")
            cbar.set_label('Time Delay [s]')
            latitude = attributeDic["Latitude"]
            longitude = np.mod(attributeDic["Longitude"],360.0)
            x, y = m(longitude,latitude)
            m.plot(x,y,'rx',markersize=20)
            plt.show()
            plt.savefig(pngFile)
            plt.close()
        
            print plotDirectory 
            print stop
