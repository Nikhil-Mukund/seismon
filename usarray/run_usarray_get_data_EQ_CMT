
import os, sys, glob
import numpy as np
import astropy.time

import obspy
import obspy.iris

from seismon import eqmon

#client = obspy.fdsn.client.Client("IRIS")

years = np.arange(2007,2018)
months = ["jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec"]
minMagnitude = 6.0

channellist = "input/channels.txt"
lines = [line.rstrip('\n') for line in open(channellist)]

GSNlist = "input/GSN.txt"
GSNs = [line.rstrip('\n') for line in open(GSNlist)]

#starttime_min=obspy.UTCDateTime(2016, 1, 1, 0, 0, 0, 0)
#endtime_max=obspy.UTCDateTime(2016, 12, 1, 0, 0, 0, 0)

for line in lines:
    lineSplit = line.split(" ")
    lineSplit = filter(None, lineSplit)

    channel = lineSplit[0]
    samplef = float(lineSplit[1])
    calibration = float(lineSplit[2])
    latitude = float(lineSplit[3])
    longitude = float(lineSplit[4])
    starttime = lineSplit[5]
    endtime = lineSplit[6]

    channelSplit = channel.split(":")
    array = channelSplit[0]

    GSNcheck = False
    for GSN in GSNs:
        GSNsplit = filter(None,GSN.split("\t"))
        GSNstation = GSNsplit[0]
        GSNnetwork = GSNsplit[1]
        if (GSNstation == channelSplit[1]) or (GSNnetwork == channelSplit[0]):
            GSNcheck = True

    if (not array in ["TA","US"]) and (not GSNcheck): continue
    #print channel, samplef, latitude, longitude, starttime, endtime

    starttime = astropy.time.Time(starttime, format='isot', scale='utc')
    endtime = astropy.time.Time(endtime, format='isot', scale='utc')

    if starttime > endtime:
        continue

    eqfile = "/home/mcoughlin/Seismon/USArray/Text_Files_EQ/CMT/%s.txt"%(channel.replace(":","_"))

    #if os.path.isfile(eqfile): continue

    f = open(eqfile,'w')

    for year in years:
        for ii,month in enumerate(months):
            starttime_month = astropy.time.Time('%d-%02d-01'%(year,ii+1), format='iso')
            if ii == 11:
                endtime_month = astropy.time.Time('%d-%02d-01'%(year+1,1), format='iso')
            else:
                endtime_month = astropy.time.Time('%d-%02d-01'%(year,ii+2), format='iso')
            if starttime > endtime_month: continue
            if endtime < starttime_month: continue

            try:
                catfile = "http://www.ldeo.columbia.edu/~gcmt/projects/CMT/catalog/NEW_MONTHLY/%d/%s%d.ndk"%(year,month,np.mod(year,100))
                cat = obspy.readEvents(catfile)
            except:
                continue

            for event in cat:
                attributeDic = eqmon.cmtread(event)

                eqtime = astropy.time.Time(attributeDic["GPS"], format='gps', scale='utc')

                if starttime > eqtime: continue
                if endtime < eqtime: continue
                if attributeDic["Magnitude"] < minMagnitude: continue

                eqtime = obspy.UTCDateTime(eqtime.isot)

                print attributeDic["eventName"], attributeDic["GPS"], attributeDic["Magnitude"], attributeDic["Latitude"],attributeDic["Longitude"]

                data = {}

                ifo = "%s,%.5f,%.5f"%(channel, latitude, longitude)
 
                attributeDicTemp = eqmon.eqmon_loc(attributeDic,ifo)
                traveltimes = attributeDicTemp["traveltimes"][channel]

                #print attributeDic["eventName"], attributeDic["GPS"], attributeDic["Magnitude"], attributeDic["Latitude"],attributeDic["Longitude"], traveltimes["Distances"][0], traveltimes["Ptimes"][0], traveltimes["Stimes"][0], traveltimes["Rtwotimes"][0], traveltimes["RthreePointFivetimes"][0], traveltimes["Rfivetimes"][0], traveltimes["Rfamp"][0]

                arrival = np.min([max(traveltimes["Rtwotimes"]),max(traveltimes["RthreePointFivetimes"]),max(traveltimes["Rfivetimes"]),max(traveltimes["Stimes"]),max(traveltimes["Ptimes"])])
                departure = np.max([max(traveltimes["Rtwotimes"]),max(traveltimes["RthreePointFivetimes"]),max(traveltimes["Rfivetimes"]),max(traveltimes["Stimes"]),max(traveltimes["Ptimes"])])

                arrival_floor = np.floor(arrival / 100.0) * 100.0
                departure_ceil = np.ceil(departure / 100.0) * 100.0

                f.write("%.1f %.1f %.1f %.1f %.1f %.1f %.1f %.5e %d %d %.1f %.1f %e %.1f %.1f %.5f %.5f %.5f %.5f %.5f %.5f %.5f %.5f %.5f %s\n"%(attributeDic["GPS"],attributeDic["Magnitude"],max(traveltimes["Ptimes"]),max(traveltimes["Stimes"]),max(traveltimes["Rtwotimes"]),max(traveltimes["RthreePointFivetimes"]),max(traveltimes["Rfivetimes"]),traveltimes["Rfamp"][0],arrival_floor,departure_ceil,attributeDic["Latitude"],attributeDic["Longitude"],max(traveltimes["Distances"]),attributeDic["Depth"],traveltimes["Azimuth"][0],attributeDic["nodalPlane1_strike"],attributeDic["nodalPlane1_rake"],attributeDic["nodalPlane1_dip"],attributeDic["momentTensor_Mrt"],attributeDic["momentTensor_Mtp"],attributeDic["momentTensor_Mrp"],attributeDic["momentTensor_Mtt"],attributeDic["momentTensor_Mrr"],attributeDic["momentTensor_Mpp"],channel))                

                print "%.1f %.1f %.1f %.1f %.1f %.1f %.1f %.5e %d %d %.1f %.1f %e %.1f %.1f %.5f %.5f %.5f %.5f %.5f %.5f %.5f %.5f %.5f %s\n"%(attributeDic["GPS"],attributeDic["Magnitude"],max(traveltimes["Ptimes"]),max(traveltimes["Stimes"]),max(traveltimes["Rtwotimes"]),max(traveltimes["RthreePointFivetimes"]),max(traveltimes["Rfivetimes"]),traveltimes["Rfamp"][0],arrival_floor,departure_ceil,attributeDic["Latitude"],attributeDic["Longitude"],max(traveltimes["Distances"]),attributeDic["Depth"],traveltimes["Azimuth"][0],attributeDic["nodalPlane1_strike"],attributeDic["nodalPlane1_rake"],attributeDic["nodalPlane1_dip"],attributeDic["momentTensor_Mrt"],attributeDic["momentTensor_Mtp"],attributeDic["momentTensor_Mrp"],attributeDic["momentTensor_Mtt"],attributeDic["momentTensor_Mrr"],attributeDic["momentTensor_Mpp"],channel)

                gpsStart = arrival_floor.copy()
                gpsEnd = departure_ceil.copy()

                psdfile = "/home/mcoughlin/Seismon/USArray/Text_Files_EQ/PSD/%s/%d-%d.txt"%(channel.replace(":","_"),gpsStart,gpsEnd)
                if os.path.isfile(psdfile): continue
       
                print channel,gpsStart,gpsEnd
                system_command = "python usarray_get_data_EQ -c %s -s %d -e %d --doDownload"%(channel,gpsStart,gpsEnd)
                #os.system(system_command)

    f.close()
 
