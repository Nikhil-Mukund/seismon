#!/usr/bin/python

# Copyright (C) 2013 Michael Coughlin
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

"""Earthquake xml file generator.

This script generates earthquake xml files using notices from the
internet and USGS PDL client.

Comments should be e-mailed to michael.coughlin@ligo.org.

"""

import os, sys, glob, optparse, warnings, time, json

import matplotlib
from mpl_toolkits.basemap import Basemap
matplotlib.use("AGG")
matplotlib.rcParams.update({'font.size': 18})
from matplotlib import pyplot as plt
from matplotlib import cm

from datetime import datetime
import numpy as np
import subprocess
from subprocess import Popen
from lxml import etree

import obspy.fdsn, obspy.core

#import lal.gpstime
import astropy.time
from astropy import units

import seismon.NLNM, seismon.utils

import gwpy.time, gwpy.timeseries, gwpy.plotter
import gwpy.frequencyseries

__author__ = "Michael Coughlin <michael.coughlin@ligo.org>"
__version__ = 1.0
__date__    = "9/22/2013"

# =============================================================================
#
#                               DEFINITIONS
#
# =============================================================================

def parse_commandline():
    """@parse the options given on the command-line.
    """
    parser = optparse.OptionParser(usage=__doc__,version=__version__)

    parser.add_option("-o", "--outputDir", help="output directory.",
                      default ="/home/mcoughlin/Seismon/USArray/")
    parser.add_option("-s", "--gpsStart", help="GPS Start Time.", default=1104105616,type=int)
    parser.add_option("-e", "--gpsEnd", help="GPS End Time.", default=1104192016,type=int)
    parser.add_option("-f", "--fftDuration", help="FFT duration.", default=128,type=int)
    parser.add_option("--fmin", help="fmin.", default=0.01,type=float)
    parser.add_option("--fmax", help="fmax.", default=10.0,type=float)
    parser.add_option("--df", help="df.", default=0.01,type=int)

    parser.add_option("-v", "--verbose", action="store_true", default=False,
                      help="Run verbosely. (Default: False)")

    parser.add_option("--doCombine",  action="store_true", default=False)

    opts, args = parser.parse_args()

    # show parameters
    if opts.verbose:
        print >> sys.stderr, ""
        print >> sys.stderr, "running network_eqmon..."
        print >> sys.stderr, "version: %s"%__version__
        print >> sys.stderr, ""
        print >> sys.stderr, "***************** PARAMETERS ********************"
        for o in opts.__dict__.items():
          print >> sys.stderr, o[0]+":"
          print >> sys.stderr, o[1]
        print >> sys.stderr, ""

    return opts

def params_struct(opts):
    """@create params structure

    @param opts
        command line options
    """

    params = {}
    params["outputDir"] = opts.outputDir
    params["gpsStart"] = opts.gpsStart
    params["gpsEnd"] = opts.gpsEnd
    params["fftDuration"] = opts.fftDuration
    params["fmin"] = opts.fmin
    params["fmax"] = opts.fmax
    params["df"] = opts.df

    params["doCombine"] = opts.doCombine

    return params

def combine_data(params):

    channellist = "input/channels.txt"
    lines = [line.rstrip('\n') for line in open(channellist)]

    ii = 0
    tt = []
    spectra = []
    data = {}
    for line in lines:
        lineSplit = line.split(" ")
        lineSplit = filter(None, lineSplit)

        channel = lineSplit[0]
        samplef = float(lineSplit[1])
        calibration = float(lineSplit[2])
        latitude = float(lineSplit[3])
        longitude = float(lineSplit[4])
        starttime = lineSplit[5]
        endtime = lineSplit[6]

        starttime = astropy.time.Time(starttime, format='isot', scale='utc')
        endtime = astropy.time.Time(endtime, format='isot', scale='utc')

        gpsStart = starttime.gps
        gpsEnd = endtime.gps

        psdfile = os.path.join(params["outputDir"],"Text_Files","PSDCombine",channel.replace(":","_"),"spectra.txt")
        if not os.path.isfile(psdfile): continue

        data_out = np.loadtxt(psdfile)
        dataASD = data_out[:,3]
        freq = data_out[:,0]

        dataASD = gwpy.frequencyseries.Spectrum(dataASD, f0=np.min(freq), df=(freq[1]-freq[0]))
        dataASD.override_unit('m/s/Hz^(1/2)')

        idx = np.where(~np.isfinite(dataASD))[0]
        dataASD[idx] = 0.0

        tt.append(ii)
        spectra.append(dataASD)
        data[channel] = {}
        data[channel]["freq"] = freq
        data[channel]["dataASD"] = dataASD
        data[channel]["latitude"] = latitude
        data[channel]["longitude"] = longitude

        ii = ii + 1

    dt = tt[1] - tt[0]
    epoch = gwpy.time.Time(tt[0], format='gps')
    specgram = gwpy.spectrogram.Spectrogram.from_spectra(*spectra, dt=dt,epoch=epoch)

    freq = np.array(specgram.frequencies)

    # Define bins for the spectral variation histogram
    kwargs = {'log':True,'nbins':500,'norm':True,'low':1e-10,'high':1e-4}
    #kwargs = {'log':True,'nbins':500}
    specvar = gwpy.frequencyseries.hist.SpectralVariance.from_spectrogram(specgram,**kwargs)
    bins = specvar.bins[:-1]
    specvar = specvar * 100

    # Calculate percentiles
    spectral_variation_1per = specvar.percentile(1)
    spectral_variation_10per = specvar.percentile(10)
    spectral_variation_50per = specvar.percentile(50)
    spectral_variation_90per = specvar.percentile(90)
    spectral_variation_99per = specvar.percentile(99)

    psdDirectory = os.path.join(params["outputDir"],"Text_Files","PSDCombineAll")
    seismon.utils.mkdir(psdDirectory)

    f = open(os.path.join(psdDirectory,"spectra.txt"),"w")
    for i in xrange(len(freq)):
        f.write("%e %e %e %e %e %e\n"%(freq[i],spectral_variation_1per[i].value,\
            spectral_variation_10per[i].value,spectral_variation_50per[i].value,\
            spectral_variation_90per[i].value,spectral_variation_99per[i].value))
    f.close()

    fl, low, fh, high = seismon.NLNM.NLNM(2)

    plotDirectory = os.path.join(params["outputDir"],"AlltimeAll")
    seismon.utils.mkdir(plotDirectory)

    pngFile = os.path.join(plotDirectory,"psd.png")

    #plot = spectraNow.plot()
    plot = gwpy.plotter.Plot(figsize=[14,8])
    kwargs = {"linestyle":"-","color":"k"}
    plot.add_line(freq, spectral_variation_10per, **kwargs)
    plot.add_line(freq, spectral_variation_50per, **kwargs)
    plot.add_line(freq, spectral_variation_90per, **kwargs)
    kwargs = {"linestyle":"-.","color":"k"}
    plot.add_line(fl, low, **kwargs)
    plot.add_line(fh, high, **kwargs)
    plot.xlim = [params["fmin"],params["fmax"]]
    plot.ylim = [np.min(bins), np.max(bins)]
    plot.xlabel = "Frequency [Hz]"
    plot.ylabel = "Amplitude Spectrum [(m/s)/rtHz]"
    plot.axes[0].set_xscale("log")
    plot.axes[0].set_yscale("log")
    plot.save(pngFile,dpi=200)
    plot.close()

    pngFile = os.path.join(plotDirectory,"specvar.png")
    kwargs = {"linestyle":"-","color":"w"}
    #plot = specvar.plot(**kwargs)
    #plot = gwpy.plotter.Plot(figsize=[14,8])
    #plot = spectraNow.plot(**kwargs)
    plot = specvar.plot(norm='log', vmin=0.5, vmax=100)
    kwargs = {"linestyle":"-","color":"k"}
    plot.add_line(freq, spectral_variation_10per, **kwargs)
    plot.add_line(freq, spectral_variation_50per, **kwargs)
    plot.add_line(freq, spectral_variation_90per, **kwargs)
    kwargs = {}
    plot.axes[0].set_xscale("log")
    plot.axes[0].set_yscale("log")
    kwargs = {"linestyle":"-.","color":"k"}
    plot.add_line(fl, low, **kwargs)
    plot.add_line(fh, high, **kwargs)
    plot.xlim = [params["fmin"],params["fmax"]]
    plot.ylim = [np.min(bins), np.max(bins)]
    plot.xlabel = "Frequency [Hz]"
    plot.ylabel = "Amplitude Spectrum [(m/s)/rtHz]"

    plot.save(pngFile,dpi=200)
    plot.close()

    pngFile = os.path.join(plotDirectory,"tf.png")
    #specgramLog = specgram.to_logf(fmin=np.min(freq),fmax=np.max(freq))
    #plot = specgramLog.plot()
    plot = specgram.plot()
    plot.ylim = [params["fmin"],params["fmax"]]
    #plot.ylabel = "Frequency [Hz]"
    colorbar_label = "Amplitude Spectrum [(m/s)/rtHz]"
    kwargs = {}
    #plot.axes[0].set_xscale("log")
    plot.axes[0].set_yscale("log")
    plot.add_colorbar(location='right', log=True, label=colorbar_label, clim=None, visible=True, **kwargs)
    plot.save(pngFile,dpi=200)
    plot.close()

    
    plotDirectory = os.path.join(params["outputDir"],"AlltimeAll","maps")
    seismon.utils.mkdir(plotDirectory)

    for ii, ff in enumerate(freq):
        pngFile = os.path.join(plotDirectory,"maps_%.2f.png"%ff)

        plt.figure(figsize=(12,6))
        m =\
Basemap(llcrnrlon=0,llcrnrlat=-80,urcrnrlon=360,urcrnrlat=80,projection='mill')

        # draw coastlines, meridians and parallels.
        m.drawcoastlines(linewidth=1.25)
        m.fillcontinents(color='0.8')
        m.drawparallels(np.arange(-80,81,20),labels=[1,1,0,0])
        m.drawmeridians(np.arange(0,360,60),labels=[0,0,0,1])
        plt.title('f = %2.2f'%ff)

        for channel in data.iterkeys():
            latitude = data[channel]["latitude"]
            longitude = np.mod(data[channel]["longitude"],360.0)

            #latitude = 42.3601
            #longitude = np.mod(-71.0589,360.0)

            print channel, latitude, longitude

            x, y = m(longitude,latitude)
            cs = m.scatter(x,y,s=20,c=np.log10(data[channel]["dataASD"][ii].value),zorder=10,vmin=-10,vmax=-6)
            #plt.text(x,y,channel,fontsize=9,
            #        ha='center',va='top',color='r',
            #        bbox = dict(boxstyle="square",ec='None',fc=(1,1,1,0.5)))   
        cbar = m.colorbar(cs,location='right',pad="5%")
        cbar.set_label('log10(Amplitude Spectrum) [m/s/rtHz]')

        plt.show()
        plt.savefig(pngFile)
        plt.close()  

def movie_data(params):

    outpath = os.path.join(params["outputDir"],"AlltimeAll")
    plotdir = os.path.join(outpath,"maps")
    moviedir = os.path.join(outpath,"movie")
    if not os.path.isdir(moviedir):
        os.mkdir(moviedir)

    files = sorted(glob.glob(os.path.join(plotdir,'*.png')))
    n=1
    for file in files:
        n = n + 1
        filename = os.path.join(moviedir,"maps-%04d.png"%n)
        cp_command = "cp %s %s"%(file,filename)
        os.system(cp_command)

    moviefiles = os.path.join(moviedir,"maps-%04d.png")
    filename = os.path.join(moviedir,"maps.mpg")
    ffmpeg_command = 'ffmpeg -an -y -r 20 -i %s -b:v %s %s'%(moviefiles,'5000k',filename)
    os.system(ffmpeg_command)
    filename = os.path.join(moviedir,"maps.gif")
    ffmpeg_command = 'ffmpeg -an -y -r 20 -i %s -b:v %s %s'%(moviefiles,'5000k',filename)
    os.system(ffmpeg_command)
    rm_command = "rm %s/*.png"%(moviedir)
    os.system(rm_command)


def run_combine():
    """@run traveltime calculator
    """

    warnings.filterwarnings("ignore")

    # Parse command line
    opts = parse_commandline()
    # Parse command line
    params = params_struct(opts)

    if params["doCombine"]:
        print "Combine data..."
        combine_data(params)
        movie_data(params)

# =============================================================================
#
#                                    MAIN
#
# =============================================================================

if __name__=="__main__":

    run_combine()

